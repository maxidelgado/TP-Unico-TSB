/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import java.io.File;
import soporte.Database;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.table.AbstractTableModel;
import soporte.Archivo;
import soporte.Conteo;
import soporte.Word;

/**
 *
 * @author rodrigo
 */
public class Ventana extends javax.swing.JFrame {

    private Database base;
    private Archivo archivo;
    private ArrayList<File> tareas;
    private ArrayList<Word> contenidoTabla;
    private ArrayList<Word> contenidoBackup;
    private TableModelPalabras tabla;

    /**
     * Constructor de ventanas
     */
    public Ventana() {
        this.base = new Database();
        base.open();
        tareas = new ArrayList<>();
        contenidoTabla = base.toWordArray();
        tabla = new TableModelPalabras();

        initComponents();
        if (contenidoTabla.isEmpty()) {
            btnBuscar.setEnabled(false);
        }
        btnRestaurar.setEnabled(false);
        jtaCola.setEditable(false);
        base.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPaneTabla = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        btnProcesar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jlLibros = new javax.swing.JLabel();
        jlPalabras = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaCola = new javax.swing.JTextArea();
        jpbAvance = new javax.swing.JProgressBar();
        jtfBusqueda = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnRestaurar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setModel(tabla);
        jTable.setToolTipText("Muestra el contenido de la base de datos.");
        jScrollPaneTabla.setViewportView(jTable);

        btnProcesar.setText("Procesar");
        btnProcesar.setToolTipText("Carga las palabras de los libros seleccionados en una base de datos.");
        btnProcesar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnProcesarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.setToolTipText("Permite cargar una lista de archivos para ser procesados.");
        btnAgregar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAgregarActionPerformed(evt);
            }
        });

        jlLibros.setText("Libros a procesar:");
        jlLibros.setToolTipText("");

        jlPalabras.setText("Ingrese un término de búsqueda:");

        jtaCola.setColumns(20);
        jtaCola.setRows(5);
        jtaCola.setToolTipText("Lista de libros seleccionados");
        jScrollPane2.setViewportView(jtaCola);

        jtfBusqueda.setToolTipText("Escriba la palabra que desea buscar.");
        jtfBusqueda.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtfBusquedaActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.setToolTipText("Luego de ingresar un término, presione aquí para realizar la búsqueda.");
        btnBuscar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBuscarActionPerformed(evt);
            }
        });

        btnRestaurar.setText("Restaurar");
        btnRestaurar.setToolTipText("Restaurar el listado completo de palabras para realizar una nueva búsqueda.");
        btnRestaurar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRestaurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlLibros)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpbAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jlPalabras, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRestaurar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfBusqueda))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlLibros)
                    .addComponent(jlPalabras)
                    .addComponent(jtfBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRestaurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnProcesar)
                    .addComponent(btnAgregar)
                    .addComponent(jpbAvance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcesarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnProcesarActionPerformed
    {//GEN-HEADEREND:event_btnProcesarActionPerformed
        if (!tareas.isEmpty()) {
            Trabajador hilo = new Trabajador(jpbAvance);
            hilo.execute();
        } else {
            JOptionPane.showMessageDialog(this, "Primero debe agregar elementos\npara procesar.", "Error: lista vacía", 2);
        }
    }//GEN-LAST:event_btnProcesarActionPerformed
    /**
     * Permite elegir un archivo. Está basado en el ejemplo provisto por los
     * docentes. Luego de seleccionar el archivo, lo agrega a una cola de
     * elementos a procesar (por el botón Cargar). Va mostrando los elementos de
     * la cola en un textArea no editable.
     *
     * @param evt
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAgregarActionPerformed
    {//GEN-HEADEREND:event_btnAgregarActionPerformed
        JFileChooser selector = new JFileChooser();
        selector.setAcceptAllFileFilterUsed(false);
        selector.setMultiSelectionEnabled(true);
        //FileFilter es usado como una clase anónima
        selector.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isFile() && f.getName().endsWith(".txt")) || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Archivos de texto plano";
            }
        });
        if (selector.showDialog(this, "Abrir") != JFileChooser.CANCEL_OPTION) {
            File[] file = selector.getSelectedFiles();
            for (File f : file) {
                tareas.add(f);
                if (!jtaCola.getText().isEmpty()) {
                    jtaCola.setText(jtaCola.getText() + '\n' + f.getName());
                } else {
                    jtaCola.setText(f.getName());
                }
            }
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBuscarActionPerformed
    {//GEN-HEADEREND:event_btnBuscarActionPerformed
        if (!jtfBusqueda.getText().isEmpty()) {
            String termino = jtfBusqueda.getText();
            ArrayList<Word> listaBusqueda = new ArrayList<Word>();
            for (Word palabra : contenidoTabla) {
                if (palabra.getPalabra().matches("(?i)(" + termino + ").*")) {
                    listaBusqueda.add(palabra);
                }
            }
            System.out.println(listaBusqueda);
            contenidoBackup = (ArrayList<Word>) contenidoTabla.clone();
            System.out.println(contenidoBackup.get(1));
            contenidoTabla = listaBusqueda;
            tabla.fireTableDataChanged();
            if (contenidoTabla.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El término de búsqueda ingresado\nno se encontró en la base de datos.", "Error: no existe el elemento", 2);
            }
            btnRestaurar.setEnabled(true);
            btnBuscar.setEnabled(false);

        } else {
            JOptionPane.showMessageDialog(this, "El término de búsqueda no\ndebe estar vacío.", "Error: término vacío", 2);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jtfBusquedaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jtfBusquedaActionPerformed
    {//GEN-HEADEREND:event_jtfBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfBusquedaActionPerformed

    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRestaurarActionPerformed
    {//GEN-HEADEREND:event_btnRestaurarActionPerformed
        if (!contenidoBackup.isEmpty() || (!contenidoBackup.equals(contenidoTabla))) {
            contenidoTabla = contenidoBackup;
            tabla.fireTableDataChanged();
            btnBuscar.setEnabled(true);
            btnRestaurar.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "No se ha realizado una búsqueda primero.", "Advertencia", 2);
            btnRestaurar.setEnabled(false);
        }
    }//GEN-LAST:event_btnRestaurarActionPerformed

    private class TableModelPalabras extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return contenidoTabla.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            try {
                Word w = (Word) contenidoTabla.get(rowIndex);
                switch (columnIndex) {

                    case 0:
                        return contenidoTabla.get(rowIndex).getId();
                    case 1:
                        return contenidoTabla.get(rowIndex).getPalabra();
                    case 2:
                        return contenidoTabla.get(rowIndex).getCantidad();
                    case 3:
                        return contenidoTabla.get(rowIndex).getOrigenes();
                }

            } catch (Exception e) {
                System.err.println("No se pudo crear la tabla" + e.getMessage());
            }
            return 0;
        }

        @Override
        public String getColumnName(int column) {
            String[] cols
                    = {
                        "Id", "Palabra", "Cantidad", "Origenes"
                    };
            return cols[column];
        }
    }

    private class Trabajador extends SwingWorker<String, Integer> {

        //Es un componente que se va a utilizar para poder retornar la salida de done()
        private JProgressBar progreso;

        //El constructor depende de lo que necesita conocer el trabajador
        public Trabajador(JProgressBar progreso) {
            this.progreso = progreso;
        }

        @Override
        /**
         * Procesa los archivos en cola. Arma un vector de rutas, a partir de
         * los elementos de la cola. crea un nuevo Archivo y le da como
         * parámetro el vector anterior y el nombre de la base después, Archivo
         * se encarga de procesar los archivos del vector y actualizar la base.
         *
         * @param evt
         */
        protected String doInBackground() throws Exception {
            JOptionPane.showMessageDialog(rootPane, "Agregando las palabras...", "Procesando", 1);
            String s = "Enviando a otro hilo..";
            base.open();
            int i = 0;
            for (File file : tareas) {
                archivo = new Archivo(file);
                HashMap<String, Integer> map = archivo.leer();
                base.insert(file.getName(), map);
                i++;
                publish(i * 100 / tareas.size());
                Conteo.clear();
                //Se actualiza el arrayList que contiene los elementos de la tabla
                //Por lo tanto, se actualiza la tabla.
                contenidoTabla = base.toWordArray();
                tabla.fireTableDataChanged();
            }
            //Crea el archivo y lo carga en la base de datos

            //Se limpia la caja de texto Libros, para restablecer la lista de tareas
            jtaCola.setText("");
            tareas.clear();
            base.close();
            JOptionPane.showMessageDialog(rootPane, "Las palabras se agregaron exitosamente.", "Lista procesada", 1);
            if (!contenidoTabla.isEmpty()) {
                btnBuscar.setEnabled(true);
            }
            return s;
        }

        //El método done se ejecuta cuando doInBackground termina, y puede obtener el resultado
        //del proceso por medio del metodo get
        @Override
        protected void done() {
            System.out.println("Hilo de done: " + Thread.currentThread().getName());
            System.out.println("Todo listo");

        }

        @Override
        protected void process(List<Integer> chunks) {
            //Recivo una lista que dice qué número de bloque estoy procesando.
            //Este proceso se ejecutará, cada vez que se ejecute el publish
            //(chunks.size()-1) sirve para ir avanzando entre los chunks
            progreso.setValue(chunks.get(chunks.size() - 1));
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnProcesar;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel jlLibros;
    private javax.swing.JLabel jlPalabras;
    private javax.swing.JProgressBar jpbAvance;
    private javax.swing.JTextArea jtaCola;
    private javax.swing.JTextField jtfBusqueda;
    // End of variables declaration//GEN-END:variables
}
