/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import java.io.File;
import soporte.Database;
import java.util.ArrayList;

import javafx.util.Pair;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import org.sqlite.core.DB;
import soporte.Archivo;

/**
 *
 * @author rodrigo
 */
public class Ventana extends javax.swing.JFrame
{

    private Database db;
    private Archivo arc;
    private ArrayList<File> cola;

    /**
     * Creates new form Ventana
     */
    public Ventana()
      {
        this.db = new Database("PRUEBA");
        db.open();
        cola = new ArrayList<>();
        initComponents();
        jtaCola.setEditable(false);
        db.close();
      }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPaneTabla = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        btnCargar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jlLibros = new javax.swing.JLabel();
        jlPalabras = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaCola = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setModel(new TableModelPalabras());
        jScrollPaneTabla.setViewportView(jTable);

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCargarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAgregarActionPerformed(evt);
            }
        });

        jlLibros.setText("Libros:");

        jlPalabras.setText("Palabras aprendidas:");

        jtaCola.setColumns(20);
        jtaCola.setRows(5);
        jScrollPane2.setViewportView(jtaCola);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlLibros)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlPalabras, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 151, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlLibros)
                    .addComponent(jlPalabras))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargar)
                    .addComponent(btnAgregar))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Procesa los archivos en cola.
     * Arma un vector de direcciones, a partir de los elementos de la cola.
     * crea un nuevo Archivo y le da como parámetro el vector anterior y el nombre de la base
     * después, Archivo se encarga de procesar los archivos del vector y actualizar la base.
     * El método reload es una basura temporal, lo que hace es eliminar la misma ventana y crear otra.
     * Falta implementar alguna manera de actualizar solamente la tabla.
     * 
     * @param evt 
     */
    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCargarActionPerformed
    {//GEN-HEADEREND:event_btnCargarActionPerformed
        db.open();
        String paths[] = new String[cola.size()];
        int i = 0;
        for (File file : cola)
          {
            System.out.println(file.getAbsolutePath());
            paths[i] = file.getAbsolutePath();
            i++;
          }
        arc = new Archivo(paths, "PRUEBA");
        arc.cargarDatabase();
        Principal.reload(this);    
        JOptionPane.showMessageDialog(this, "Las palabras se agregaron exitosamente.", "Cola procesada", 1);
        db.close();
    }//GEN-LAST:event_btnCargarActionPerformed
    /**
     * Permite elegir un archivo.
     * Está basado en el ejemplo provisto por los docentes.
     * Luego de seleccionar el archivo, lo agrega a una cola de elementos a procesar
     * (por el botón Cargar).
     * Va mostrando los elementos de la cola en un textArea no editable.
     * @param evt 
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAgregarActionPerformed
    {//GEN-HEADEREND:event_btnAgregarActionPerformed
        JFileChooser selector = new JFileChooser();
        //FileFilter es usado como una clase anónima
        selector.setFileFilter(new javax.swing.filechooser.FileFilter()
        {
            @Override
            public boolean accept(File f)
              {
                return (f.isFile() && f.getName().endsWith(".txt")) || f.isDirectory();
              }

            @Override
            public String getDescription()
              {
                return "Archivos de texto plano";
              }
        });
        if (selector.showDialog(this, "Abrir") != JFileChooser.CANCEL_OPTION)
          {
            File file = selector.getSelectedFile();
            cola.add(file);
            if (!jtaCola.getText().isEmpty())
              {
                jtaCola.setText(jtaCola.getText() + '\n' + file.getName());
              } else
              {
                jtaCola.setText(file.getName());
              }
          }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private class TableModelPalabras extends AbstractTableModel
    {

        ArrayList arr = db.toArray();
        
        @Override
        public int getRowCount()
          {
            return arr.size();
          }

        @Override
        public int getColumnCount()
          {
            return 2;
          }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex)
          {
            try
              {
                Pair p = (Pair) arr.get(rowIndex);
                switch (columnIndex)
                  {

                    case 0:

                        return p.getKey();
                    case 1:

                        return p.getValue();
                  }

              } catch (Exception e)
              {
                System.err.println("No se pudo crear la tabla" + e.getMessage());
              }
            return 0;
          }

        @Override
        public String getColumnName(int column)
          {
            String[] cols =
              {
                "Palabra", "Frecuencia"
              };
            return cols[column];
          }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
      {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
          {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
              {
                if ("Nimbus".equals(info.getName()))
                  {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                  }
              }
          } catch (ClassNotFoundException ex)
          {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (InstantiationException ex)
          {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (IllegalAccessException ex)
          {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (javax.swing.UnsupportedLookAndFeelException ex)
          {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
              {
                new Ventana().setVisible(true);
              }
        });
      }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCargar;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel jlLibros;
    private javax.swing.JLabel jlPalabras;
    private javax.swing.JTextArea jtaCola;
    // End of variables declaration//GEN-END:variables
}
